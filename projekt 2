#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int v1, v2, n1, n2, maxV;
fstream file;
vector<string> withSuccessors;//wierzchołki z następnikami
vector<vector<string>> graph;//graf
vector<int> edges; //łuki
vector<vector<int>> temporary;//graf przejściowy
vector<int> edgesForVertices; //łuki na wierzchołki
vector<vector<int>> oryginalGraph;//graf oryginalny H

void spaceSeparator(string line){//funkcja odpowiada za dodawanie do vectora wierzchołków - oddzielonych spacją
    string space = " ";
    int lineCount = 0;
    string vertex;
    withSuccessors.clear();
    while ((lineCount = line.find(space)) != string::npos){ //pętla kończy się na ostatnim polu w stringu
        vertex = line.substr(0, lineCount); //substr - kopiuje i zwraca stringa od pozycji 0(początku) do wartości zmiennej lineCount
        withSuccessors.push_back(vertex); //Dodaje nowy element na końcu wektora
        line.erase(0, lineCount + space.length()); //usuwa jeden element lub wiele elementów z
                                                        // kontenera listy występujących na podanej pozycji lub w podanym zakresie. O(1).
    }
    withSuccessors.push_back(line);
}
void loadFromFile(){//funkcja odpowiada za załadawanie grafu z pliku
    file.open("C:\\Users\\Dell\\CLionProjects\\akwb2\\testt.txt", ios::in);
    string line;
    if (!file.good()) {
        cout << "Plik nie istnieje.";
        exit(0);
    }
    else {
        while (getline(file, line)) {  //getline odczytuje linia po linii i zapisuje w stringu
            spaceSeparator(line);
            graph.push_back(withSuccessors);
        }
        file.close();
    }
}
//sprawdzam czy graf jest sprzężony
bool multigraf(vector<vector<string>> g){//krok 1 do sprawdzenia czy mamy do czynienia z grafem sprzężonym to sprawdzenie
                                        // czy na wejściu dostaliśmy multigraf tzn. czy występują krawędzie wielokrotne/pętle
                                        // np z jednego wychodza dwa wierzcholki
    for(int i=0; i<g.size(); i++){
        for(int j=1; j<g[i].size(); j++){
            for(int k=j+1; k<g[i].size(); k++){
                if (g[i][j]==g[i][k]){
                    return true; //zwraca true gdy jest multigrafem
                }
            }
        }
    }
    return false; //nie jest multigrafem
}
bool isSeparated(vector<vector<string>> g, int v1, int v2){//krok 2 - sprawdzenie czy tablice dla dwóch różnych wierzchołków
                                                    // nie mają wspólnych elementów, czyli czy nie powtarzają się następniki
    for(int i=1; i<g[v1].size(); i++){
        for(int j=1; j<g[v2].size(); j++){
            if(v1!=v2 && g[v1][i]==g[v2][j]){
                return true;//tablice nie są rozłączne - mają wspólnego następnika
            }
        }
    }
    return false;//nie mają wspólnego następnika
}
bool areTheSame(vector<vector<string>> g, int vv1, int vv2){
    for(int i=1; i<g[vv2].size(); i++){
        if(g[vv1][i]==g[vv2][i]){
            return true;//wszystkie następniki są takie same      n+x = n+y
        }
    }
    return false;//nie są
}
bool isAdjoint(vector <vector<string>> g){//sprawdzanie czy graf jest sprzężony wywołując powyższe funkcje
    for(int i=0; i<g.size(); i++){
        for(int j=0; j<g.size(); j++){
            if(i!=j && isSeparated(g, i, j)){//jeśli mają element wspólny to należy sprawdzić czy tych elementów jest tyle samo
                if(g[i].size()==g[j].size()){ //sprawdzenie czy 2 wierzchołki mają tyle samo następników
                    if(areTheSame(g, i, j)){  //jeśli następniki są takie same
                        continue;
                    }
                    else{
                        return false;//nie jest sprzężony
                    }
                }
                else{
                    return false;//nie jest sprzężony
                }
            }
        }
    }
    return true;//jest
}
//sprawdzam czy graf jest liniowy. Żeby był, jako podgraf nie może on zawierać żadnej z podanych na stronie struktur
bool firstStruct(vector<vector<string>> g, int n1int, int n2int){
    for(int i=0; i<g.size(); i++){
        if(g[i].size()>=2){//1 i 2 to następniki wierzchołka 0. Jeśli jest mniej następników to nie ma sensu wchodzić dalej
            for(int j=1; j<g[i].size(); j++){//2 następniki tego wierzchołka
                for(int k=j+1; k<g[i].size(); k++){
                    string n1str=g[i][j];
                    string n2str=g[i][k];
                    n1int=stoi(n1str);
                    n2int=stoi(n2str);
                    n1int-=1;//odejmujemy 1 bo jest indeksowane od 0
                    n2int-=1;
                    for(int l=1; l<g[n1int].size(); l++){
                        for(int m=1; m<g[n2int].size(); m++){
                            if(g[n1int][l]==g[n2int][m]){
                                if(n1int==l || n2int==m){//różne od siebie, żeby nie patrzył na pętle własne
                                    return true;//zawiera 1 strukturę
                                }
                            }
                        }               //        . ->
                    }                   //  . ->         .
                }                       //        . ->
            }
        }
        else{
            continue;
        }
    }
    return false;//nie zawiera
}
bool secondStruct(vector<vector<string>> g){
    for(int i=0; i<g.size(); i++){
        if(g[i].size()>=2){
            for(int j=1; j<g[i].size(); j++){
                for(int k=j+1; k<g[i].size(); k++){
                    string n1str=g[i][j];
                    string n2str=g[i][k];
                    int n1int=stoi(n1str);
                    int n2int=stoi(n2str);
                    n1int-=1;//odejmujemy 1 bo jest indeksowane od 0
                    n2int-=1;
                    for(int l=1; l<g[n1int].size(); l++){//szukanie dwóch następników
                        for(int m=1; m<g[n2int].size(); m++){
                            if(g[n1int][l]==g[n2int][m]){//sprawdzanie czy te następniki mają jednego wspólnego
                                if(n1int==l || n2int==m){//różne od siebie, żeby nie patrzył na pętle własne
                                    string tmp = g[n1int][l];
                                    int tmpInt = stoi(tmp);
                                    tmpInt-=1;
                                    if(tmpInt==i){//należy porównać czy wspólny następnik jest taki sam jak wierzchołek wyjściowy i (ten na początku)
                                        return true;//zawiera 2 strukturę
                                    }
                                }
                                else{
                                    continue;
                                }
                            }
                        }
                    }                             //    ----->  . <-----
                }                                //     |   /      \   |
            }                                   //      . <-         -> .
        }
    }
    return false;
}
bool thirdStruct(vector<vector<string>> g){
    for(int i=0; i<g.size(); i++){
        for(int j=1; j<g[i].size(); j++){
            if(g[i][0]==g[i][j]){//sprawdzenie czy występuje pętla własna
                for(int k=0; k<g.size(); k++){
                    for(int l=1; l<g[k].size(); l++){
                        if(g[k][0]==g[k][l]){//czy jest pętla własna dla innego wierzchołka
                            if(i!=k){
                                for(int m=1; m<g[i].size(); m++){
                                    if(g[k][0]==g[i][m]){
                                        for(int n=1; n<g[k].size(); n++){
                                            if(g[i][0]==g[k][n]){
                                                return true;
                                            }
                                        }
                                    }
                                }
                            }                                //
                        }                                   //   (.<--===(.<--
                    }                                      //
                }
            }
        }
    }
    return false;
}
void isLinear(vector<vector<string>> g){
    if(firstStruct(graph, n1, n2) || secondStruct(graph) || thirdStruct(graph)){
        cout<<"Graf nie jest liniowy"<<endl;
    }
    else{
        cout<<"Graf jest liniowy"<<endl;
    }
}
//transformacja
void createEdges(vector<vector<string>> g, vector<vector<int>>& t, vector<int> e){        //top
    for(int i=1; i<=2*g.size(); i++){                          //bo 2x wiecej wierzcholkow sie tworzy
        e.clear();
        e.push_back(i);
        i++;
        e.push_back(i);
        t.push_back(e);
    }
}
void conversion(vector<vector<string>> g, vector<vector<int>>& t){
    for(int i=0; i<g.size(); i++){
        for(int j=1; j<g[i].size(); j++){
            string tmpG=g[i][j];//zapisujemu następnika grafu G
            int tmpGint=stoi(tmpG);
            tmpGint-=1;
            int tmpT=t[i][1];//zapisujemy następnika grafu H
            int tmp=t[tmpGint][0];//wierzchołek wyjściowy
            for(int k=0; k<t.size(); k++){
                if(t[k][1]==tmp){
                    t[k][1]=tmpT;
                }
                if(t[k][0]==tmp){
                    t[tmpGint][0]=tmpT;
                }
            }
        }
    }
}
void indexing(vector<vector<int>>& t){
    for(int i=1; i<2*t.size(); i++){//2*size ponieważ numery w grafie orygianlnym mają wieksze wartości(2 razy więcej wierzchołków)
        bool isInOrder=false;
        for(int j=0; j<t.size(); j++){
            if(t[j][0]==i || t[j][1]==i){
                isInOrder=true;
                break;
            }
        }
        if(!isInOrder){
            int index=i;
            do{
                i++;
                for(int k=0; k<t.size(); k++){
                    for(int l=0; l<2; l++){
                        if(t[k][l]==i){
                            t[k][l] = index;
                            maxV=t[k][l];
                            isInOrder=true;
                        }
                    }
                }
            }while(!isInOrder && i<2*t.size());
            i = index;
        }
    }
}
void compressing(vector<vector<int>>& t, vector<vector<int>>& h, vector<int> v){
    for(int i=1; i<maxV+1; i++){
        v.clear();
        v.push_back(i);
        for(int j=0; j<t.size(); j++){
            if(i==t[j][0]){
                int x=t[j][1];
                v.push_back(x);
            }
        }
        h.push_back(v);
    }
}
void saveToFile(string fileName, vector<vector<int>> h) {
    fstream file;
    file.open(fileName, ios::out | ios::app);
    for (int i = 0; i < h.size(); i++) {
        file << "\n";
        for (int j = 0; j < h[i].size(); j++) {
            file << h[i][j] << " ";
        }
    }
    file.close();
}

int main() {
    string output;
    loadFromFile();
    if(multigraf(graph)){
        cout<<"Graf nie jest sprzezony"<<endl;
    }
    else{
        if(isAdjoint(graph)){
            cout<<"Graf jest sprzezony"<<endl;
            isLinear(graph);
            createEdges(graph, temporary, edges);
            conversion(graph, temporary);
            indexing(temporary);
            sort(temporary.begin(), temporary.end());
            compressing(temporary, oryginalGraph, edgesForVertices);
            cout<<"Podaj nazwe pliku: ";
            cin>>output;
            saveToFile(output, oryginalGraph);
        }
        else{
            cout<<"Graf nie jest sprzezony"<<endl;
        }
    }
    return 0;
}
